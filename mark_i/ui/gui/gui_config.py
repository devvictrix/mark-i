import logging
from typing import Dict, List, Any, Optional

# --- Constants ---
DEFAULT_PROFILE_STRUCTURE: Dict[str, Any] = {
    "profile_description": "New Profile",
    "settings": {
        "monitoring_interval_seconds": 1.0,
        "analysis_dominant_colors_k": 3,
        "tesseract_cmd_path": None,
        "tesseract_config_custom": "",
        "gemini_default_model_name": "gemini-1.5-flash-latest",
    },
    "regions": [],
    "templates": [],
    "rules": [],
}

MAX_PREVIEW_WIDTH: int = 200
MAX_PREVIEW_HEIGHT: int = 150

WIZARD_SCREENSHOT_PREVIEW_MAX_WIDTH = 600
WIZARD_SCREENSHOT_PREVIEW_MAX_HEIGHT = 380
CANDIDATE_BOX_COLORS = ["#FF00FF", "#00FFFF", "#FFFF00", "#F08080", "#90EE90", "#ADD8E6", "#FFC0CB", "#E6E6FA"]
SELECTED_CANDIDATE_BOX_COLOR = "lime green"
FONT_PATH_PRIMARY = "arial.ttf"
FONT_PATH_FALLBACK = "DejaVuSans.ttf"

# --- Dropdown Options ---
CONDITION_TYPES: List[str] = [
    "pixel_color",
    "average_color_is",
    "template_match_found",
    "ocr_contains_text",
    "dominant_color_matches",
    "gemini_vision_query",
    "always_true",
]
ACTION_TYPES: List[str] = ["click", "type_text", "press_key", "log_message", "gemini_perform_task"]
LOGICAL_OPERATORS: List[str] = ["AND", "OR"]
CLICK_TARGET_RELATIONS: List[str] = [
    "center_of_region",
    "center_of_last_match",
    "absolute",
    "relative_to_region",
    "center_of_gemini_element",
    "top_left_of_gemini_element",
]
CLICK_BUTTONS: List[str] = ["left", "middle", "right", "primary", "secondary"]
LOG_LEVELS: List[str] = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
GEMINI_TASK_ALLOWED_PRIMITIVE_ACTIONS_FOR_UI_HINT: List[str] = [
    "CLICK_DESCRIBED_ELEMENT",
    "TYPE_IN_DESCRIBED_FIELD",
    "PRESS_KEY_SIMPLE",
    "CHECK_VISUAL_STATE",
]

# --- UI Parameter Configuration with Tooltips ---
UI_PARAM_CONFIG: Dict[str, Dict[str, List[Dict[str, Any]]]] = {
    "conditions": {
        "pixel_color": [
            {"id": "relative_x", "label": "Relative X:", "widget": "entry", "type": int, "default": 0, "required": True, "group": "Targeting"},
            {"id": "relative_y", "label": "Relative Y:", "widget": "entry", "type": int, "default": 0, "required": True, "group": "Targeting"},
            {"id": "expected_bgr", "label": "Expected BGR:", "widget": "entry", "type": "bgr_string", "default": "0,0,0", "required": True, "placeholder": "B,G,R", "group": "Color Matching"},
            {"id": "tolerance", "label": "Tolerance (0-255):", "widget": "entry", "type": int, "default": 0, "required": True, "min_val": 0, "max_val": 255, "group": "Color Matching"},
            {"id": "region", "label": "Target Region (Override):", "widget": "optionmenu_dynamic", "options_source": "regions", "type": str, "default": "", "required": False, "group": "Scope"},
        ],
        "average_color_is": [
            {
                "id": "expected_bgr",
                "label": "Expected Avg BGR:",
                "widget": "entry",
                "type": "bgr_string",
                "default": "128,128,128",
                "required": True,
                "placeholder": "B,G,R",
                "group": "Color Matching",
            },
            {
                "id": "tolerance",
                "label": "Tolerance (0-255):",
                "widget": "entry",
                "type": int,
                "default": 10,
                "required": True,
                "min_val": 0,
                "max_val": 255,
                "placeholder": "10",
                "group": "Color Matching",
            },
            {"id": "region", "label": "Target Region (Override):", "widget": "optionmenu_dynamic", "options_source": "regions", "type": str, "default": "", "required": False, "group": "Scope"},
        ],
        "template_match_found": [
            {"id": "template_name", "label": "Template Name:", "widget": "optionmenu_dynamic", "options_source": "templates", "type": str, "default": "", "required": True, "group": "Template"},
            {
                "id": "min_confidence",
                "label": "Min Confidence (0.0-1.0):",
                "widget": "entry",
                "type": float,
                "default": 0.8,
                "required": True,
                "min_val": 0.0,
                "max_val": 1.0,
                "group": "Matching Parameters",
            },
            {"id": "capture_as", "label": "Capture Match As:", "widget": "entry", "type": str, "default": "", "required": False, "placeholder": "Optional variable name", "group": "Output"},
            {"id": "region", "label": "Target Region (Override):", "widget": "optionmenu_dynamic", "options_source": "regions", "type": str, "default": "", "required": False, "group": "Scope"},
        ],
        "ocr_contains_text": [
            {
                "id": "text_to_find",
                "label": "Text to Find (CSV for OR):",
                "widget": "entry",
                "type": "list_str_csv",
                "default": [],
                "required": True,
                "placeholder": "keyword1,another",
                "group": "Text Matching",
            },
            {"id": "case_sensitive", "label": "Case Sensitive Search", "widget": "checkbox", "type": bool, "default": False, "required": False, "group": "Text Matching"},
            {
                "id": "min_ocr_confidence",
                "label": "Min OCR Confidence (0-100, Optional):",
                "widget": "entry",
                "type": float,
                "default": 70.0,
                "required": False,
                "min_val": 0.0,
                "max_val": 100.0,
                "group": "OCR Parameters",
            },
            {"id": "capture_as", "label": "Capture Full OCR Text As:", "widget": "entry", "type": str, "default": "", "required": False, "placeholder": "Optional variable name", "group": "Output"},
            {"id": "region", "label": "Target Region (Override):", "widget": "optionmenu_dynamic", "options_source": "regions", "type": str, "default": "", "required": False, "group": "Scope"},
        ],
        "dominant_color_matches": [
            {"id": "expected_bgr", "label": "Expected Dom. BGR:", "widget": "entry", "type": "bgr_string", "default": "0,0,255", "required": True, "placeholder": "B,G,R", "group": "Color Matching"},
            {
                "id": "tolerance",
                "label": "Tolerance (0-255):",
                "widget": "entry",
                "type": int,
                "default": 10,
                "required": True,
                "min_val": 0,
                "max_val": 255,
                "placeholder": "10",
                "group": "Color Matching",
            },
            {
                "id": "check_top_n_dominant",
                "label": "Check Top N Colors:",
                "widget": "entry",
                "type": int,
                "default": 1,
                "required": True,
                "min_val": 1,
                "placeholder": "1 to K (from settings)",
                "group": "Analysis Parameters",
            },
            {
                "id": "min_percentage",
                "label": "Min % Occurrence (0-100):",
                "widget": "entry",
                "type": float,
                "default": 5.0,
                "required": False,
                "min_val": 0.0,
                "max_val": 100.0,
                "placeholder": "5.0",
                "group": "Analysis Parameters",
            },
            {"id": "region", "label": "Target Region (Override):", "widget": "optionmenu_dynamic", "options_source": "regions", "type": str, "default": "", "required": False, "group": "Scope"},
        ],
        "gemini_vision_query": [
            {
                "id": "prompt",
                "label": "Gemini Vision Prompt:",
                "widget": "textbox",
                "type": str,
                "default": "Describe this image.",
                "required": True,
                "height": 100,
                "group": "AI Prompt",
                "tooltip": "The question to ask Gemini about the region image.\nGood prompts are specific. To get coordinates, ask for a JSON response with a 'box' key.",
            },
            {
                "id": "expected_response_contains",
                "label": "Response Contains (CSV for OR, Optional):",
                "widget": "entry",
                "type": "list_str_csv",
                "default": [],
                "required": False,
                "placeholder": "success,OK",
                "group": "Validation",
                "tooltip": "Condition passes if Gemini's text response contains any of these comma-separated keywords.",
            },
            {"id": "case_sensitive_response_check", "label": "Case Sensitive (for 'Contains')", "widget": "checkbox", "type": bool, "default": False, "required": False, "group": "Validation"},
            {
                "id": "expected_response_json_path",
                "label": "JSON Path in Response (Optional):",
                "widget": "entry",
                "type": str,
                "default": "",
                "required": False,
                "placeholder": "data.items.0.name",
                "group": "Validation",
                "tooltip": "Use dot notation to check a value within a JSON response from Gemini.\nExample: user.name or results.0.status",
            },
            {
                "id": "expected_json_value",
                "label": "Expected JSON Value (Optional):",
                "widget": "entry",
                "type": str,
                "default": "",
                "required": False,
                "placeholder": "Value at JSON path",
                "group": "Validation",
                "tooltip": "If JSON Path is set, the condition will only pass if the value at that path matches this string.",
            },
            {
                "id": "capture_as",
                "label": "Capture Gemini Response As:",
                "widget": "entry",
                "type": str,
                "default": "",
                "required": False,
                "placeholder": "Optional variable name",
                "group": "Output",
                "tooltip": "Save Gemini's response to a variable. If JSON Path is used, only that value is saved. Otherwise, the full JSON (if valid) or text is saved.",
            },
            {
                "id": "model_name",
                "label": "Gemini Model (Override):",
                "widget": "entry",
                "type": str,
                "default": "",
                "required": False,
                "placeholder": "e.g., gemini-1.5-flash-latest",
                "group": "AI Configuration",
                "tooltip": "Specify a Gemini model to use, overriding the profile's default model for this specific query.",
            },
            {"id": "region", "label": "Target Region (Override):", "widget": "optionmenu_dynamic", "options_source": "regions", "type": str, "default": "", "required": False, "group": "Scope"},
        ],
        "always_true": [
            {
                "id": "region",
                "label": "Context Region (Optional Override):",
                "widget": "optionmenu_dynamic",
                "options_source": "regions",
                "type": str,
                "default": "",
                "required": False,
                "group": "Scope",
            }
        ],
    },
    "actions": {
        "click": [
            {
                "id": "target_relation",
                "label": "Target Relation:",
                "widget": "optionmenu_static",
                "options_const_key": "CLICK_TARGET_RELATIONS",
                "type": str,
                "default": "center_of_region",
                "required": True,
                "group": "Targeting",
                "tooltip": "Defines how the click coordinate is calculated.\n'center_of_region': Clicks the center of the rule's default or target region.\n'center_of_last_match': Clicks the center of a found template.\n'absolute': Clicks absolute screen coordinates.\n'gemini_element': Clicks a coordinate derived from a Gemini vision query variable.",
            },
            {
                "id": "target_region",
                "label": "Target Region:",
                "widget": "optionmenu_dynamic",
                "options_source": "regions",
                "type": str,
                "default": "",
                "required": False,
                "condition_show": {"field": "target_relation", "values": ["center_of_region", "relative_to_region"]},
                "group": "Targeting",
            },
            {
                "id": "x",
                "label": "X Coord/Offset:",
                "widget": "entry",
                "type": str,
                "default": "0",
                "required": False,
                "placeholder": "Abs/Rel X or {var}",
                "condition_show": {"field": "target_relation", "values": ["absolute", "relative_to_region"]},
                "group": "Targeting",
            },
            {
                "id": "y",
                "label": "Y Coord/Offset:",
                "widget": "entry",
                "type": str,
                "default": "0",
                "required": False,
                "placeholder": "Abs/Rel Y or {var}",
                "condition_show": {"field": "target_relation", "values": ["absolute", "relative_to_region"]},
                "group": "Targeting",
            },
            {
                "id": "gemini_element_variable",
                "label": "Gemini Element Variable:",
                "widget": "entry",
                "type": str,
                "default": "",
                "required": False,
                "placeholder": "e.g., captured_button_data",
                "condition_show": {"field": "target_relation", "values": ["center_of_gemini_element", "top_left_of_gemini_element"]},
                "group": "Targeting",
            },
            {
                "id": "button",
                "label": "Mouse Button:",
                "widget": "optionmenu_static",
                "options_const_key": "CLICK_BUTTONS",
                "type": str,
                "default": "left",
                "required": True,
                "group": "Click Properties",
            },
            {"id": "clicks", "label": "Number of Clicks:", "widget": "entry", "type": str, "default": "1", "required": False, "placeholder": "1 or {var}", "group": "Click Properties"},
            {"id": "interval", "label": "Interval Betw. Clicks (s):", "widget": "entry", "type": str, "default": "0.0", "required": False, "placeholder": "0.0 or {var}", "group": "Click Properties"},
            {
                "id": "pyautogui_pause_before",
                "label": "Pause Before Action (s):",
                "widget": "entry",
                "type": str,
                "default": "0.0",
                "required": False,
                "placeholder": "0.0 or {var}",
                "group": "Timing",
            },
        ],
        "type_text": [
            {
                "id": "text",
                "label": "Text to Type:",
                "widget": "textbox",
                "type": str,
                "default": "",
                "required": True,
                "allow_empty_string": True,
                "placeholder": "Enter text or use {variable}",
                "height": 80,
                "group": "Content",
            },
            {
                "id": "interval",
                "label": "Interval Betw. Keystrokes (s):",
                "widget": "entry",
                "type": str,
                "default": "0.0",
                "required": False,
                "placeholder": "0.0 or {var}",
                "group": "Typing Properties",
            },
            {
                "id": "pyautogui_pause_before",
                "label": "Pause Before Action (s):",
                "widget": "entry",
                "type": str,
                "default": "0.0",
                "required": False,
                "placeholder": "0.0 or {var}",
                "group": "Timing",
            },
        ],
        "press_key": [
            {
                "id": "key",
                "label": "Key(s) to Press (CSV for hotkey):",
                "widget": "entry",
                "type": str,
                "default": "enter",
                "required": True,
                "placeholder": "e.g., enter OR ctrl,alt,delete",
                "group": "Key Input",
            },
            {
                "id": "pyautogui_pause_before",
                "label": "Pause Before Action (s):",
                "widget": "entry",
                "type": str,
                "default": "0.0",
                "required": False,
                "placeholder": "0.0 or {var}",
                "group": "Timing",
            },
        ],
        "log_message": [
            {
                "id": "message",
                "label": "Log Message:",
                "widget": "textbox",
                "type": str,
                "default": "Rule triggered log message.",
                "required": True,
                "placeholder": "Your message or {variable}",
                "height": 80,
                "group": "Content",
            },
            {"id": "level", "label": "Log Level:", "widget": "optionmenu_static", "options_const_key": "LOG_LEVELS", "type": str, "default": "INFO", "required": True, "group": "Content"},
        ],
        "gemini_perform_task": [
            {
                "id": "natural_language_command",
                "label": "Natural Language Command:",
                "widget": "textbox",
                "type": str,
                "default": "Click the 'Next' button.",
                "required": True,
                "height": 100,
                "group": "AI Command",
                "tooltip": "A high-level command for Gemini to interpret and execute.\nGemini will break this down into smaller steps like finding and clicking elements.",
            },
            {
                "id": "context_region_names",
                "label": "Context Regions (CSV, Optional):",
                "widget": "entry",
                "type": "list_str_csv",
                "default": [],
                "required": False,
                "placeholder": "main_window,status_bar",
                "group": "AI Context",
                "tooltip": "Provide Gemini with images from these regions for visual context.\nIf empty, uses the rule's default region.",
            },
            {
                "id": "allowed_actions_override",
                "label": "Allowed Sub-Actions (CSV, Optional):",
                "widget": "entry",
                "type": "list_str_csv",
                "default": [],
                "required": False,
                "placeholder": "CLICK_DESCRIBED_ELEMENT",
                "group": "AI Configuration",
                "tooltip": "Limit the types of actions Gemini can perform. If empty, all safe actions are allowed.",
            },
            {"id": "require_confirmation_per_step", "label": "Confirm Each AI-Decided Step", "widget": "checkbox", "type": bool, "default": True, "required": False, "group": "AI Configuration"},
            {
                "id": "max_steps",
                "label": "Max NLU Task Steps:",
                "widget": "entry",
                "type": int,
                "default": 5,
                "required": False,
                "min_val": 1,
                "max_val": 25,
                "placeholder": "5",
                "group": "AI Configuration",
            },
            {
                "id": "pyautogui_pause_before",
                "label": "Pause Before Task Start (s):",
                "widget": "entry",
                "type": str,
                "default": "0.1",
                "required": False,
                "placeholder": "0.1 or {var}",
                "group": "Timing",
            },
        ],
    },
}
# Fallback for missing keys
for cond_type in CONDITION_TYPES:
    UI_PARAM_CONFIG["conditions"].setdefault(cond_type, [])
for act_type in ACTION_TYPES:
    UI_PARAM_CONFIG["actions"].setdefault(act_type, [])

# Mapping for static optionmenu sources
OPTIONS_CONST_MAP: Dict[str, List[str]] = {
    "CLICK_TARGET_RELATIONS": CLICK_TARGET_RELATIONS,
    "CLICK_BUTTONS": CLICK_BUTTONS,
    "LOG_LEVELS": LOG_LEVELS,
    "LOGICAL_OPERATORS": LOGICAL_OPERATORS,
    "GEMINI_TASK_ALLOWED_ACTION_TYPES_FOR_UI": GEMINI_TASK_ALLOWED_PRIMITIVE_ACTIONS_FOR_UI_HINT,
}
